package main

import (
	"flag"
	"log"
)

func main() {
	keySchemaFile := flag.String("key-schema-file", "customer-key.avsc", "AVRO key schema file")
	valueSchemaFile := flag.String("value-schema-file", "customer-value.avsc", "AVRO value schema file")
	dataFile := flag.String("data-file", "data.json", "JSON data file")
	bootstrapServers := GetEnv("BOOTSTRAP_SERVERS", "localhost:9092")
	schemaRegistryUrl := GetEnv("SCHEMA_REGISTRY_URL", "http://localhost:8081")
	topicName := GetEnv("TOPIC_NAME", "event.customer.entity")
	flag.Parse()
	log.Printf("keySchemaFile: %v\n", *keySchemaFile)
	log.Printf("valueSchemaFile: %v\n", *valueSchemaFile)
	log.Printf("dataFile: %v\n", *dataFile)
	log.Printf("bootstrapServers: %v\n", bootstrapServers)
	log.Printf("schemaRegistryUrl: %v\n", schemaRegistryUrl)
	log.Printf("topicName: %v\n", topicName)

	log.Printf("readSchema(%v)\n", keySchemaFile)
	keySchema := ReadFile(*keySchemaFile)
	log.Printf("readSchema(%v)\n", valueSchemaFile)
	valueSchema := ReadFile(*valueSchemaFile)

	log.Printf("BuildProducer\n")
	kafkaProducer, err := BuildProducer(bootstrapServers, schemaRegistryUrl, topicName, keySchema, valueSchema)
	if err != nil {
		panic(err)
	}

	log.Printf("readData\n")
	data := ReadJson(*dataFile)
	for _, item := range data {
		log.Printf("kafkaProducer.ProduceCustomer(%v)\n", item)
		kafkaProducer.ProduceCustomer(item)
	}
}
